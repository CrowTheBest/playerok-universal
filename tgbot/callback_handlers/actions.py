from aiogram import F, Router
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramAPIError

from settings import Settings as sett
from .. import templates as templ
from .. import callback_datas as calls
from .. import states as states

from ..helpful import throw_float_message
from .navigation import *

router = Router()



@router.callback_query(F.data == "destroy")
async def callback_back(callback: CallbackQuery):
    await callback.message.delete()


@router.callback_query(F.data == "enter_token")
async def callback_enter_token(callback: CallbackQuery, state: FSMContext):
    await state.set_state(states.SettingsStates.entering_token)
    config = sett.get("config")
    golden_key = config["playerok"]["api"]["token"] or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
    await throw_float_message(state=state, 
                              message=callback.message, 
                              text=templ.settings_auth_float_text(f"üîê –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π <b>—Ç–æ–∫–µ–Ω</b> –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ ‚Üì\n‚îó –¢–µ–∫—É—â–µ–µ: <code>{golden_key}</code>"), 
                              reply_markup=templ.back_kb(calls.SettingsNavigation(to="auth").pack()))

@router.callback_query(F.data == "enter_user_agent")
async def callback_enter_user_agent(callback: CallbackQuery, state: FSMContext):
    await state.set_state(states.SettingsStates.entering_user_agent)
    config = sett.get("config")
    user_agent = config["playerok"]["api"]["user_agent"] or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
    await throw_float_message(state=state, 
                              message=callback.message, 
                              text=templ.settings_auth_float_text(f"üé© –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π <b>user_agent</b> –≤–∞—à–µ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞ ‚Üì\n‚îó –¢–µ–∫—É—â–µ–µ: <code>{user_agent}</code>"), 
                              reply_markup=templ.back_kb(calls.SettingsNavigation(to="auth").pack()))
    

@router.callback_query(F.data == "remove_proxy")
async def callback_remove_proxy(callback: CallbackQuery, state: FSMContext):
    await state.set_state(None)
    config = sett.get("config")
    proxy = config["playerok"]["api"]["proxy"] = ""
    sett.set("config", config)
    return await callback_settings_navigation(callback, calls.SettingsNavigation(to="conn"), state)

@router.callback_query(F.data == "enter_proxy")
async def callback_enter_proxy(callback: CallbackQuery, state: FSMContext):
    await state.set_state(states.SettingsStates.entering_proxy)
    config = sett.get("config")
    proxy = config["playerok"]["api"]["proxy"] or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
    await throw_float_message(state=state, 
                              message=callback.message, 
                              text=templ.settings_conn_float_text(f"üåê –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π <b>–ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä</b> (—Ñ–æ—Ä–º–∞—Ç: user:pass@ip:port –∏–ª–∏ ip:port) ‚Üì\n‚îó –¢–µ–∫—É—â–µ–µ: <code>{proxy}</code>"), 
                              reply_markup=templ.back_kb(calls.SettingsNavigation(to="conn").pack()))

@router.callback_query(F.data == "enter_requests_timeout")
async def callback_enter_requests_timeout(callback: CallbackQuery, state: FSMContext):
    await state.set_state(states.SettingsStates.entering_requests_timeout)
    config = sett.get("config")
    requests_timeout = config["playerok"]["api"]["requests_timeout"] or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
    await throw_float_message(state=state, 
                              message=callback.message, 
                              text=templ.settings_conn_float_text(f"üõú –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π <b>—Ç–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</b> (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö) ‚Üì\n‚îó –¢–µ–∫—É—â–µ–µ: <code>{requests_timeout}</code>"), 
                              reply_markup=templ.back_kb(calls.SettingsNavigation(to="conn").pack()))

@router.callback_query(F.data == "enter_playerokapi_listener_requests_delay")
async def callback_enter_playerokapi_listener_requests_delay(callback: CallbackQuery, state: FSMContext):
    await state.set_state(states.SettingsStates.entering_listener_requests_delay)
    config = sett.get("config")
    requests_timeout = config["playerok"]["api"]["listener_requests_delay"] or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
    await throw_float_message(state=state, 
                                message=callback.message, 
                                text=templ.settings_conn_float_text(f"‚è±Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é <b>–ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤</b> (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö) ‚Üì\n‚îó –¢–µ–∫—É—â–µ–µ: <code>{requests_timeout}</code>"), 
                                reply_markup=templ.back_kb(calls.SettingsNavigation(to="conn").pack()))


@router.callback_query(F.data == "switch_auto_restore_items_enabled")
async def callback_switch_auto_restore_items_enabled(callback: CallbackQuery, state: FSMContext):
    config = sett.get("config")
    config["playerok"]["bot"]["auto_restore_items_enabled"] = not config["playerok"]["bot"]["auto_restore_items_enabled"]
    sett.set("config", config)
    return await callback_settings_navigation(callback, calls.SettingsNavigation(to="items"), state)

@router.callback_query(F.data == "switch_auto_restore_items_priority_status")
async def callback_switch_auto_restore_items_priority_status(callback: CallbackQuery, state: FSMContext):
    config = sett.get("config")
    config["playerok"]["bot"]["auto_restore_items_priority_status"] = "DEFAULT" if config["playerok"]["bot"]["auto_restore_items_priority_status"] == "PREMIUM" else "PREMIUM"
    sett.set("config", config)
    return await callback_settings_navigation(callback, calls.SettingsNavigation(to="items"), state)

@router.callback_query(F.data == "switch_read_chat_before_sending_message_enabled")
async def callback_switch_read_chat_before_sending_message_enabled(callback: CallbackQuery, state: FSMContext):
    config = sett.get("config")
    config["playerok"]["bot"]["read_chat_before_sending_message_enabled"] = not config["playerok"]["bot"]["read_chat_before_sending_message_enabled"]
    sett.set("config", config)
    return await callback_settings_navigation(callback, calls.SettingsNavigation(to="other"), state)

@router.callback_query(F.data == "switch_auto_complete_deals_enabled")
async def callback_switch_auto_complete_deals_enabled(callback: CallbackQuery, state: FSMContext):
    config = sett.get("config")
    config["playerok"]["bot"]["auto_complete_deals_enabled"] = not config["playerok"]["bot"]["auto_complete_deals_enabled"]
    sett.set("config", config)
    return await callback_settings_navigation(callback, calls.SettingsNavigation(to="other"), state)

@router.callback_query(F.data == "switch_first_message_enabled")
async def callback_switch_first_message_enabled(callback: CallbackQuery, state: FSMContext):
    config = sett.get("config")
    config["playerok"]["bot"]["first_message_enabled"] = False if config["playerok"]["bot"]["first_message_enabled"] else True
    sett.set("config", config)
    return await callback_settings_navigation(callback, calls.SettingsNavigation(to="other"), state)

@router.callback_query(F.data == "switch_custom_commands_enabled")
async def callback_switch_custom_commands_enabled(callback: CallbackQuery, state: FSMContext):
    config = sett.get("config")
    config["playerok"]["bot"]["custom_commands_enabled"] = False if config["playerok"]["bot"]["custom_commands_enabled"] else True
    sett.set("config", config)
    return await callback_settings_navigation(callback, calls.SettingsNavigation(to="other"), state)

@router.callback_query(F.data == "switch_auto_deliveries_enabled")
async def callback_switch_auto_deliveries_enabled(callback: CallbackQuery, state: FSMContext):
    config = sett.get("config")
    config["playerok"]["bot"]["auto_deliveries_enabled"] = False if config["playerok"]["bot"]["auto_deliveries_enabled"] else True
    sett.set("config", config)
    return await callback_settings_navigation(callback, calls.SettingsNavigation(to="other"), state)

@router.callback_query(F.data == "switch_messages_watermark_enabled")
async def callback_switch_messages_watermark_enabled(callback: CallbackQuery, state: FSMContext):
    config = sett.get("config")
    config["playerok"]["bot"]["messages_watermark_enabled"] = False if config["playerok"]["bot"]["messages_watermark_enabled"] else True
    sett.set("config", config)
    return await callback_settings_navigation(callback, calls.SettingsNavigation(to="other"), state)

@router.callback_query(F.data == "enter_messages_watermark")
async def callback_enter_messages_watermark(callback: CallbackQuery, state: FSMContext):
    await state.set_state(states.SettingsStates.entering_messages_watermark)
    config = sett.get("config")
    messages_watermark = config["playerok"]["bot"]["messages_watermark"] or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
    await throw_float_message(state=state, 
                              message=callback.message, 
                              text=templ.settings_other_float_text(f"‚úçÔ∏è¬©Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π <b>–≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫</b> –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ ‚Üì\n‚îó –¢–µ–∫—É—â–µ–µ: <code>{messages_watermark}</code>"), 
                              reply_markup=templ.back_kb(calls.SettingsNavigation(to="other").pack()))
        


@router.callback_query(F.data == "enter_custom_commands_page")
async def callback_enter_custom_commands_page(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    last_page = data.get("last_page") or 0
    await state.set_state(states.CustomCommandsStates.entering_page)
    await throw_float_message(state=state, 
                              message=callback.message, 
                              text=templ.settings_comm_float_text(f"üìÉ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ ‚Üì"), 
                              reply_markup=templ.back_kb(calls.CustomCommandsPagination(page=last_page).pack()))

@router.callback_query(F.data == "enter_new_custom_command")
async def callback_enter_new_custom_command(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    last_page = data.get("last_page") or 0
    await state.set_state(states.CustomCommandsStates.entering_new_custom_command)
    await throw_float_message(state=state, 
                              message=callback.message, 
                              text=templ.adding_new_comm_float_text(f"‚å®Ô∏è –í–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>!—Ç–µ—Å—Ç</code>) ‚Üì"), 
                              reply_markup=templ.back_kb(calls.CustomCommandsPagination(page=last_page).pack()))

@router.callback_query(F.data == "add_new_custom_command")
async def callback_add_new_custom_command(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        last_page = data.get("last_page") or 0
        custom_commands = sett.get("custom_commands")
        new_custom_command = data.get("new_custom_command")
        new_custom_command_answer = data.get("new_custom_command_answer")
        if not new_custom_command:
            raise Exception("‚ùå –ù–æ–≤–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞")
        if not new_custom_command_answer:
            raise Exception("‚ùå –û—Ç–≤–µ—Ç –Ω–∞ –Ω–æ–≤—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –∫–æ–º–∞–Ω–¥—É –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞")

        custom_commands[new_custom_command] = new_custom_command_answer.splitlines()
        sett.set("custom_commands", custom_commands)
        last_page = data.get("last_page") or 0
        await throw_float_message(state=state, 
                                  message=callback.message, 
                                  text=templ.adding_new_comm_float_text(f"‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞</b> <code>{new_custom_command}</code> –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞"), 
                                  reply_markup=templ.back_kb(calls.CustomCommandsPagination(page=last_page).pack()))
    except Exception as e:
        if e is not TelegramAPIError:
            data = await state.get_data()
            last_page = data.get("last_page") or 0
            await throw_float_message(state=state, 
                                      message=callback.message, 
                                      text=templ.adding_new_comm_float_text(e), 
                                      reply_markup=templ.back_kb(calls.CustomCommandsPagination(page=last_page).pack()))

@router.callback_query(F.data == "enter_custom_command_answer")
async def callback_enter_custom_command_answer(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        custom_commands = sett.get("custom_commands")
        custom_command = data.get("custom_command")
        if not custom_command:
            raise Exception("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞")
        
        await state.set_state(states.CustomCommandPageStates.entering_custom_command_answer)
        custom_command_answer = "\n".join(custom_commands[custom_command]) or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
        await throw_float_message(state=state, 
                                  message=callback.message, 
                                  text=templ.settings_comm_page_float_text(f"üí¨ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π <b>—Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞</b> –∫–æ–º–∞–Ω–¥—ã <code>{custom_command}</code> ‚Üì\n‚îó –¢–µ–∫—É—â–µ–µ: <blockquote>{custom_command_answer}</blockquote>"), 
                                  reply_markup=templ.back_kb(calls.CustomCommandPage(command=custom_command).pack()))
    except Exception as e:
        if e is not TelegramAPIError:
            data = await state.get_data()
            last_page = data.get("last_page") or 0
            await throw_float_message(state=state, 
                                      message=callback.message, 
                                      text=templ.settings_comm_page_float_text(e), 
                                      reply_markup=templ.back_kb(calls.CustomCommandsPagination(page=last_page).pack()))

@router.callback_query(F.data == "confirm_deleting_custom_command")
async def callback_confirm_deleting_custom_command(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        custom_command = data.get("custom_command")
        if not custom_command:
            raise Exception("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞")
        
        await throw_float_message(state=state, 
                                  message=callback.message, 
                                  text=templ.settings_comm_page_float_text(f"üóëÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ <b>—É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–æ–º–∞–Ω–¥—ã</b> <code>{custom_command}</code>"), 
                                  reply_markup=templ.confirm_kb(confirm_cb="delete_custom_command", cancel_cb=calls.CustomCommandPage(command=custom_command).pack()))
    except Exception as e:
        if e is not TelegramAPIError:
            data = await state.get_data()
            last_page = data.get("last_page") or 0
            await throw_float_message(state=state, 
                                      message=callback.message, 
                                      text=templ.settings_comm_page_float_text(e), 
                                      reply_markup=templ.back_kb(calls.CustomCommandsPagination(page=last_page).pack()))

@router.callback_query(F.data == "delete_custom_command")
async def callback_delete_custom_command(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        last_page = data.get("last_page") or 0
        custom_commands = sett.get("custom_commands")
        custom_command = data.get("custom_command")
        if not custom_command:
            raise Exception("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞")
        
        del custom_commands[custom_command]
        sett.set("custom_commands", custom_commands)
        await throw_float_message(state=state, 
                                  message=callback.message, 
                                  text=templ.settings_comm_page_float_text(f"‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞</b> <code>{custom_command}</code> –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞"), 
                                  reply_markup=templ.back_kb(calls.CustomCommandsPagination(page=last_page).pack()))
    except Exception as e:
        if e is not TelegramAPIError:
            data = await state.get_data()
            last_page = data.get("last_page") or 0
            await throw_float_message(state=state, 
                                      message=callback.message, 
                                      text=templ.settings_comm_page_float_text(e), 
                                      reply_markup=templ.back_kb(calls.CustomCommandsPagination(page=last_page).pack()))


@router.callback_query(F.data == "enter_auto_deliveries_page")
async def callback_enter_auto_deliveries_page(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    last_page = data.get("last_page") or 0
    await state.set_state(states.AutoDeliveriesStates.entering_page)
    await throw_float_message(state=state, 
                              message=callback.message, 
                              text=templ.settings_deliv_float_text(f"üìÉ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ ‚Üì"), 
                              reply_markup=templ.back_kb(calls.AutoDeliveriesPagination(page=last_page).pack()))

@router.callback_query(F.data == "enter_new_auto_delivery_keyphrases")
async def callback_enter_new_auto_delivery_keyphrases(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    last_page = data.get("last_page") or 0
    await state.set_state(states.AutoDeliveriesStates.entering_new_auto_delivery_keyphrases)
    await throw_float_message(state=state, 
                              message=callback.message, 
                              text=templ.adding_new_deliv_float_text(f"üîë –í–≤–µ–¥–∏—Ç–µ <b>–∫–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã</b> –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ-–≤—ã–¥–∞—á—É (—É–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä, \"telegram –ø–æ–¥–ø–∏—Å—á–∏–∫–∏, –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∞\") ‚Üì"), 
                              reply_markup=templ.back_kb(calls.AutoDeliveriesPagination(page=last_page).pack()))

@router.callback_query(F.data == "add_new_auto_delivery")
async def callback_add_new_auto_delivery(callback: CallbackQuery, state: FSMContext):
    try:
        await state.set_state(None)
        data = await state.get_data()
        last_page = data.get("last_page") or 0
        auto_deliveries = sett.get("auto_deliveries")
        new_auto_delivery_keyphrases = data.get("new_auto_delivery_keyphrases")
        new_auto_delivery_message = data.get("new_auto_delivery_message")
        if not new_auto_delivery_keyphrases:
            raise Exception("‚ùå –ö–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏ –Ω–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞")
        if not new_auto_delivery_message:
            raise Exception("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞")
        
        auto_deliveries.append({"keyphrases": new_auto_delivery_keyphrases, "message": new_auto_delivery_message.splitlines()})
        sett.set("auto_deliveries", auto_deliveries)
        await throw_float_message(state=state, 
                                  message=callback.message, 
                                  text=templ.adding_new_deliv_float_text(f"‚úÖ <b>–ê–≤—Ç–æ-–≤—ã–¥–∞—á–∞</b> –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞"), 
                                  reply_markup=templ.back_kb(calls.AutoDeliveriesPagination(page=last_page).pack()))
    except Exception as e:
        if e is not TelegramAPIError:
            data = await state.get_data()
            last_page = data.get("last_page") or 0
            await throw_float_message(state=state, 
                                      message=callback.message, 
                                      text=templ.adding_new_deliv_float_text(e), 
                                      reply_markup=templ.back_kb(calls.AutoDeliveriesPagination(page=last_page).pack()))

@router.callback_query(F.data == "enter_auto_delivery_keyphrases")
async def callback_enter_auto_delivery_keyphrases(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        auto_delivery_index = data.get("auto_delivery_index")
        if auto_delivery_index is None:
            raise Exception("‚ùå –ê–≤—Ç–æ-–≤—ã–¥–∞—á–∞ –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞")
        
        await state.set_state(states.AutoDeliveryPageStates.entering_auto_delivery_keyphrases)
        auto_deliveries = sett.get("auto_deliveries")
        auto_delivery_message = "</code>, <code>".join(auto_deliveries[auto_delivery_index]["keyphrases"]) or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
        await throw_float_message(state=state, 
                                  message=callback.message, 
                                  text=templ.settings_deliv_page_float_text(f"üîë –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ <b>–∫–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã</b> –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏ (—É–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)\n‚îó –¢–µ–∫—É—â–µ–µ: <code>{auto_delivery_message}</code>"), 
                                  reply_markup=templ.back_kb(calls.AutoDeliveryPage(index=auto_delivery_index).pack()))
    except Exception as e:
        if e is not TelegramAPIError:
            data = await state.get_data()
            last_page = data.get("last_page") or 0
            await throw_float_message(state=state, 
                                      message=callback.message, 
                                      text=templ.settings_deliv_page_float_text(e), 
                                      reply_markup=templ.back_kb(calls.AutoDeliveriesPagination(page=last_page).pack()))

@router.callback_query(F.data == "enter_auto_delivery_message")
async def callback_enter_auto_delivery_message(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        auto_delivery_index = data.get("auto_delivery_index")
        if auto_delivery_index is None:
            raise Exception("‚ùå –ê–≤—Ç–æ-–≤—ã–¥–∞—á–∞ –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞")
        
        await state.set_state(states.AutoDeliveryPageStates.entering_auto_delivery_message)
        auto_deliveries = sett.get("auto_deliveries")
        auto_delivery_message = "\n".join(auto_deliveries[auto_delivery_index]["message"]) or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
        await throw_float_message(state=state, 
                                  message=callback.message, 
                                  text=templ.settings_deliv_page_float_text(f"üí¨ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ <b>—Å–æ–æ–±—â–µ–Ω–∏–µ</b> –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏\n‚îó –¢–µ–∫—É—â–µ–µ: <blockquote>{auto_delivery_message}</blockquote>"), 
                                  reply_markup=templ.back_kb(calls.AutoDeliveryPage(index=auto_delivery_index).pack()))
    except Exception as e:
        if e is not TelegramAPIError:
            data = await state.get_data()
            last_page = data.get("last_page") or 0
            await throw_float_message(state=state, 
                                      message=callback.message, 
                                      text=templ.settings_deliv_page_float_text(e), 
                                      reply_markup=templ.back_kb(calls.AutoDeliveriesPagination(page=last_page).pack()))

@router.callback_query(F.data == "confirm_deleting_auto_delivery")
async def callback_confirm_deleting_auto_delivery(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        auto_delivery_index = data.get("auto_delivery_index")
        if auto_delivery_index is None:
            raise Exception("‚ùå –ê–≤—Ç–æ-–≤—ã–¥–∞—á–∞ –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞")
        

        auto_deliveries = sett.get("auto_deliveries")
        auto_delivery_keyphrases = "</code>, <code>".join(auto_deliveries[auto_delivery_index]["keyphrases"]) or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
        await throw_float_message(state=state, 
                                  message=callback.message, 
                                  text=templ.settings_deliv_page_float_text(f"üóëÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ <b>—É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∞–≤—Ç–æ-–≤—ã–¥–∞—á–∏</b> –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑ <code>{auto_delivery_keyphrases}</code>"), 
                                  reply_markup=templ.confirm_kb(confirm_cb="delete_auto_delivery", cancel_cb=calls.AutoDeliveryPage(index=auto_delivery_index).pack()))
    except Exception as e:
        if e is not TelegramAPIError:
            data = await state.get_data()
            last_page = data.get("last_page") or 0
            await throw_float_message(state=state, 
                                      message=callback.message, 
                                      text=templ.settings_deliv_page_float_text(e), 
                                      reply_markup=templ.back_kb(calls.AutoDeliveriesPagination(page=last_page).pack()))

@router.callback_query(F.data == "delete_auto_delivery")
async def callback_delete_auto_delivery(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        auto_delivery_index = data.get("auto_delivery_index")
        if auto_delivery_index is None:
            raise Exception("‚ùå –ê–≤—Ç–æ-–≤—ã–¥–∞—á–∞ –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞")
        
        auto_deliveries = sett.get("auto_deliveries")
        del auto_deliveries[auto_delivery_index]
        sett.set("auto_deliveries", auto_deliveries)
        last_page = data.get("last_page") or 0
        await throw_float_message(state=state, 
                                  message=callback.message, 
                                  text=templ.settings_deliv_page_float_text(f"‚úÖ <b>–ê–≤—Ç–æ-–≤—ã–¥–∞—á–∞</b> –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞"), 
                                  reply_markup=templ.back_kb(calls.AutoDeliveriesPagination(page=last_page).pack()))
    except Exception as e:
        if e is not TelegramAPIError:
            data = await state.get_data()
            last_page = data.get("last_page") or 0
            await throw_float_message(state=state, 
                                      message=callback.message, 
                                      text=templ.settings_deliv_page_float_text(e), 
                                      reply_markup=templ.back_kb(calls.AutoDeliveriesPagination(page=last_page).pack()))

        
@router.callback_query(F.data == "enter_messages_page")
async def callback_enter_messages_page(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    last_page = data.get("last_page") or 0
    await state.set_state(states.MessagesStates.entering_page)
    await throw_float_message(state=state, 
                              message=callback.message, 
                              text=templ.settings_mess_float_text(f"üìÉ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ ‚Üì"), 
                              reply_markup=templ.back_kb(calls.MessagesPagination(page=last_page).pack()))

@router.callback_query(F.data == "enter_message_text")
async def callback_enter_message_text(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        last_page = data.get("last_page") or 0
        message_id = data.get("message_id")
        if not message_id:
            raise Exception("‚ùå ID —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞")
        
        await state.set_state(states.MessagePageStates.entering_message_text)
        messages = sett.get("messages")
        mess_text = "\n".join(messages[message_id]) or "‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ"
        await throw_float_message(state=state, 
                                  message=callback.message, 
                                  text=templ.settings_mess_float_text(f"üí¨ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π <b>—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è</b> <code>{message_id}</code> ‚Üì\n‚îó –¢–µ–∫—É—â–µ–µ: <blockquote>{mess_text}</blockquote>"), 
                                  reply_markup=templ.back_kb(calls.MessagesPagination(page=last_page).pack()))
    except Exception as e:
        if e is not TelegramAPIError:
            data = await state.get_data()
            last_page = data.get("last_page") or 0
            await throw_float_message(state=state, 
                                      message=callback.message, 
                                      text=templ.settings_mess_float_text(e), 
                                      reply_markup=templ.back_kb(calls.MessagesPagination(page=last_page).pack()))


@router.callback_query(F.data == "switch_tg_logging_enabled")
async def callback_switch_tg_logging_enabled(callback: CallbackQuery, state: FSMContext):
    config = sett.get("config")
    config["playerok"]["bot"]["tg_logging_enabled"] = not config["playerok"]["bot"]["tg_logging_enabled"]
    sett.set("config", config)
    return await callback_settings_navigation(callback, calls.SettingsNavigation(to="logger"), state)

@router.callback_query(F.data == "enter_tg_logging_chat_id")
async def callback_enter_tg_logging_chat_id(callback: CallbackQuery, state: FSMContext):
    await state.set_state(states.SettingsStates.entering_tg_logging_chat_id)
    config = sett.get("config")
    tg_logging_chat_id = config["playerok"]["bot"]["tg_logging_chat_id"] or "‚úîÔ∏è –í–∞—à —á–∞—Ç —Å –±–æ—Ç–æ–º"
    await throw_float_message(state=state, 
                              message=callback.message, 
                              text=templ.settings_logger_float_text(f"üí¨ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π <b>ID —á–∞—Ç–∞ –¥–ª—è –ª–æ–≥–æ–≤</b> (–≤—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –∫–∞–∫ —Ü–∏—Ñ—Ä–æ–≤–æ–π ID, —Ç–∞–∫ –∏ —é–∑–µ—Ä–Ω–µ–π–º —á–∞—Ç–∞) ‚Üì\n‚îó –¢–µ–∫—É—â–µ–µ: <code>{tg_logging_chat_id}</code>"), 
                              reply_markup=templ.back_kb(calls.SettingsNavigation(to="logger").pack()))

@router.callback_query(F.data == "switch_tg_logging_event_new_user_message")
async def callback_switch_tg_logging_event_new_user_message(callback: CallbackQuery, state: FSMContext):
    config = sett.get("config")
    config["playerok"]["bot"]["tg_logging_events"]["new_user_message"] = not config["playerok"]["bot"]["tg_logging_events"]["new_user_message"]
    sett.set("config", config)
    return await callback_settings_navigation(callback, calls.SettingsNavigation(to="logger"), state)

@router.callback_query(F.data == "switch_tg_logging_event_new_system_message")
async def callback_switch_tg_logging_event_new_system_message(callback: CallbackQuery, state: FSMContext):
    config = sett.get("config")
    config["playerok"]["bot"]["tg_logging_events"]["new_system_message"] = not config["playerok"]["bot"]["tg_logging_events"]["new_system_message"]
    sett.set("config", config)
    return await callback_settings_navigation(callback, calls.SettingsNavigation(to="logger"), state)

@router.callback_query(F.data == "switch_tg_logging_event_new_deal")
async def callback_switch_tg_logging_event_new_deal(callback: CallbackQuery, state: FSMContext):
    config = sett.get("config")
    config["playerok"]["bot"]["tg_logging_events"]["new_deal"] = not config["playerok"]["bot"]["tg_logging_events"]["new_deal"]
    sett.set("config", config)
    return await callback_settings_navigation(callback, calls.SettingsNavigation(to="logger"), state)

@router.callback_query(F.data == "switch_tg_logging_event_new_problem")
async def callback_switch_tg_logging_event_new_problem(callback: CallbackQuery, state: FSMContext):
    config = sett.get("config")
    config["playerok"]["bot"]["tg_logging_events"]["new_problem"] = not config["playerok"]["bot"]["tg_logging_events"]["new_problem"]
    sett.set("config", config)
    return await callback_settings_navigation(callback, calls.SettingsNavigation(to="logger"), state)

@router.callback_query(F.data == "switch_tg_logging_event_deal_status_changed")
async def callback_switch_tg_logging_event_deal_status_changed(callback: CallbackQuery, state: FSMContext):
    config = sett.get("config")
    config["playerok"]["bot"]["tg_logging_events"]["deal_status_changed"] = not config["playerok"]["bot"]["tg_logging_events"]["deal_status_changed"]
    sett.set("config", config)
    return await callback_settings_navigation(callback, calls.SettingsNavigation(to="logger"), state)

@router.callback_query(F.data == "clean_tg_logging_chat_id")
async def callback_clean_tg_logging_chat_id(callback: CallbackQuery, state: FSMContext):
    config = sett.get("config")
    config["playerok"]["bot"]["tg_logging_chat_id"] = ""
    sett.set("config", config)
    return await callback_settings_navigation(callback, calls.SettingsNavigation(to="logger"), state)


@router.callback_query(F.data == "switch_module_enabled")
async def callback_disable_module(callback: CallbackQuery, state: FSMContext):
    from core.modules_manager import ModulesManager as modman
    try:
        data = await state.get_data()
        last_page = data.get("last_page") or 0
        module_uuid = data.get("module_uuid")
        if not module_uuid:
            raise Exception("‚ùå UUID –º–æ–¥—É–ª—è –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞")

        module = modman.get_module_by_uuid(module_uuid)
        modman.disable_module(module_uuid) if module.enabled else modman.enable_module(module_uuid)
        return await callback_module_page(callback, calls.ModulePage(uuid=module_uuid), state)
    except Exception as e:
        if e is not TelegramAPIError:
            data = await state.get_data()
            last_page = data.get("last_page") or 0
            await throw_float_message(state=state, 
                                      message=callback.message, 
                                      text=templ.module_page_float_text(e), 
                                      reply_markup=templ.back_kb(calls.ModulesPagination(page=last_page).pack()))