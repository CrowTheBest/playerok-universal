import asyncio
import time
from datetime import datetime, timedelta
import time
import traceback
from threading import Thread
from colorama import Fore, Style
from aiogram.types import InlineKeyboardMarkup

import settings
from settings import Settings as sett
from logging import getLogger
from data import Data as data
from .stats import get_stats, set_stats

from playerokapi.account import Account
from playerokapi import exceptions as plapi_exceptions
from playerokapi.enums import *
from playerokapi.listener.events import *
from playerokapi.listener.listener import EventListener
from playerokapi.types import Chat, Item

from __init__ import VERSION, ACCENT_COLOR
from core.console import set_title, restart
from core.handlers_manager import HandlersManager

from . import set_playerok_bot
from tgbot import get_telegram_bot, get_telegram_bot_loop
from tgbot.templates import log_text, log_new_mess_kb, log_new_deal_kb

PREFIX = F"{Fore.CYAN}[PL]{Fore.WHITE}"



class PlayerokBot:
    """
    –ö–ª–∞—Å—Å, –∑–∞–ø—É—Å–∫–∞—é—â–∏–π –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π Playerok –±–æ—Ç–∞.
    """

    def __init__(self):
        self.config = sett.get("config")
        self.messages = sett.get("messages")
        self.custom_commands = sett.get("custom_commands")
        self.auto_deliveries = sett.get("auto_deliveries")
        self.logger = getLogger(f"universal.playerok")

        try:
            self.playerok_account = Account(token=self.config["playerok"]["api"]["token"],
                                            user_agent=self.config["playerok"]["api"]["user_agent"],
                                            requests_timeout=self.config["playerok"]["api"]["requests_timeout"],
                                            proxy=self.config["playerok"]["api"]["proxy"] or None).get()
            """ –ö–ª–∞—Å—Å, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –¥–∞–Ω–Ω—ã–µ –∏ –º–µ—Ç–æ–¥—ã –∞–∫–∫–∞—É–Ω—Ç–∞ Playerok """
        except plapi_exceptions.UnauthorizedError as e:
            self.logger.error(f"{PREFIX} {Fore.LIGHTRED_EX}–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –≤–∞—à–µ–º—É Playerok –∞–∫–∫–∞—É–Ω—Ç—É. –û—à–∏–±–∫–∞: {Fore.WHITE}{e}")
            print(f"{Fore.WHITE}üîë  –£–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–π {Fore.LIGHTCYAN_EX}token{Fore.WHITE}? +/-")
            a = input(f"{Fore.WHITE}‚Üí {Fore.LIGHTWHITE_EX}")
            if a == "+":
                param = {"playerok": {"api": {"token": settings.DATA["config"]["params"]["playerok"]["api"]["token"]}}}
                sett.configure("config", ACCENT_COLOR, params=param)
                restart()
            else:
                self.logger.info(f"{PREFIX} –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–º –±–æ—Ç–∞ –∏ –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É...")
                restart()

        self.initialized_users: list = data.get("initialized_users")
        """ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤ –¥–∏–∞–ª–æ–≥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏. """
        self.stats = get_stats()
        """ –°–ª–æ–≤–∞—Ä—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ —Å –º–æ–º–µ–Ω—Ç–∞ –∑–∞–ø—É—Å–∫–∞. """

        self.__saved_chats: dict[str, Chat] = {}
        """ 
        –°–ª–æ–≤–∞—Ä—å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–æ–º–Ω–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤.\n
        –í —Ñ–æ—Ä–º–∞—Ç–µ: {`chat_id` _or_ `username`: `chat_obj`, ...}
        """

        set_playerok_bot(self)

    def get_chat_by_id(self, chat_id: str) -> Chat:
        """ 
        –ü–æ–ª—É—á–∞–µ—Ç —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–∑ –∑–∞–ø–æ–º–Ω–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ –ø–æ –µ–≥–æ ID.
        –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç –∏ –ø–æ–ª—É—á–∞–µ—Ç —á–∞—Ç, –µ—Å–ª–∏ –æ–Ω –Ω–µ –∑–∞–ø–æ–º–Ω–µ–Ω.
        """
        if chat_id in self.__saved_chats:
            return self.__saved_chats[chat_id]
        self.__saved_chats[chat_id] = self.playerok_account.get_chat(chat_id)
        return self.get_chat_by_id(chat_id)

    def get_chat_by_username(self, username: str) -> Chat:
        """ 
        –ü–æ–ª—É—á–∞–µ—Ç —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–∑ –∑–∞–ø–æ–º–Ω–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ –ø–æ –Ω–∏–∫–Ω–µ–π–º—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.
        –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç –∏ –ø–æ–ª—É—á–∞–µ—Ç —á–∞—Ç, –µ—Å–ª–∏ –æ–Ω –Ω–µ –∑–∞–ø–æ–º–Ω–µ–Ω.
        """
        if username in self.__saved_chats:
            return self.__saved_chats[username]
        self.__saved_chats[username] = self.playerok_account.get_chat_by_username(username)
        return self.get_chat_by_username(username)

    def get_my_items(self, statuses: list[ItemStatuses] | None = None) -> list[types.ItemProfile]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∞–∫–∫–∞—É–Ω—Ç–∞.
        """
        user = self.playerok_account.get_user(self.playerok_account.id)
        my_items: list[types.ItemProfile] = []
        next_cursor = None
        stop = False
        while not stop:
            _items = user.get_items(statuses=statuses, after_cursor=next_cursor)
            for _item in _items.items:
                if _item.id not in [item.id for item in my_items]:
                    my_items.append(_item)
            if not _items.page_info.has_next_page:
                break
            next_cursor = _items.page_info.end_cursor
            time.sleep(0.1)
        return my_items
    

    def msg(self, message_name: str, exclude_watermark: bool = False, **kwargs) -> str:
        """ 
        –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è —Å–æ–æ–±—â–µ–Ω–∏–π.

        :param message_name: –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä–µ —Å–æ–æ–±—â–µ–Ω–∏–π (ID).
        :type message_name: str

        :param exclude_watermark: –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫.
        :type exclude_watermark: bool
        """

        class SafeDict(dict):
            def __missing__(self, key):
                return "{" + key + "}"
        
        message_lines: list[str] = self.messages[message_name]
        if message_lines:
            try:
                formatted_lines = [line.format_map(SafeDict(**kwargs)) for line in message_lines]
                msg = "\n".join(formatted_lines)
                if not exclude_watermark and self.config["playerok"]["bot"]["messages_watermark_enabled"]:
                    msg += f'\n{self.config["playerok"]["bot"]["messages_watermark"]}'
                return msg
            except:
                pass
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"
    
    def send_message(self, chat_id: str, text: str | None = None, photo_file_path: str | None = None,
                     mark_chat_as_read: bool = None, max_attempts: int = 3) -> types.ChatMessage:
        """
        –ö–∞—Å—Ç–æ–º–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç Playerok.
        –ü—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞ 3 –ø–æ–ø—ã—Ç–∫–∏, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å - –≤—ã–¥–∞—ë—Ç –æ—à–∏–±–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å.\n
        –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ `text` –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é `photo_file_path`.

        :param chat_id: ID —á–∞—Ç–∞, –≤ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.
        :type chat_id: `str`

        :param text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, _–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ_.
        :type text: `str` or `None`

        :param photo_file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, _–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ_.
        :type photo_file_path: `str` or `None`

        :param mark_chat_as_read: –ü–æ–º–µ—Ç–∏—Ç—å —á–∞—Ç, –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π, _–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ_.
        :type mark_chat_as_read: `bool`

        :return: –û–±—ä–µ–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
        :rtype: `PlayerokAPI.types.ChatMessage`
        """
        for _ in range(max_attempts):
            try:
                mark_chat_as_read = (self.config["playerok"]["bot"]["read_chat_before_sending_message_enabled"] or False) if mark_chat_as_read is None else mark_chat_as_read
                mess = self.playerok_account.send_message(chat_id, text, photo_file_path, mark_chat_as_read)
                return mess
            except plapi_exceptions.RequestFailedError:
                continue
            except Exception as e:
                text = text.replace('\n', '').strip()
                self.logger.error(f"{PREFIX} {Fore.LIGHTRED_EX}–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {Fore.LIGHTWHITE_EX}¬´{text}¬ª {Fore.LIGHTRED_EX}–≤ —á–∞—Ç {Fore.LIGHTWHITE_EX}{chat_id} {Fore.LIGHTRED_EX}: {Fore.WHITE}{e}")
                return
        text = text.replace('\n', '').strip()
        self.logger.error(f"{PREFIX} {Fore.LIGHTRED_EX}–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {Fore.LIGHTWHITE_EX}¬´{text}¬ª {Fore.LIGHTRED_EX}–≤ —á–∞—Ç {Fore.LIGHTWHITE_EX}{chat_id}")

    def log_to_tg(self, text: str, kb: InlineKeyboardMarkup | None = None):
        """
        –õ–æ–≥–≥–∏—Ä—É–µ—Ç –∏–≤–µ–Ω—Ç –≤ Telegram –±–æ—Ç–∞.

        :param text: –¢–µ–∫—Å—Ç –ª–æ–≥–∞.
        :type text: str
        """
        asyncio.run_coroutine_threadsafe(get_telegram_bot().log_event(text, kb), get_telegram_bot_loop())


    async def restore_last_sold_item(self, item: Item):
        """ 
        –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–¥–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç. 
        
        :param item: –û–±—ä–µ–∫—Ç –ø—Ä–µ–¥–º–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å.
        :type item: `playerokapi.types.Item`
        """
        try:
            profile = self.playerok_account.get_user(id=self.playerok_account.id)
            items = profile.get_items(count=24, statuses=[ItemStatuses.SOLD]).items
            _item = [profile_item for profile_item in items if profile_item.name == item.name]
            if len(_item) <= 0: return
            try: item: types.MyItem = self.playerok_account.get_item(_item[0].id)
            except: item = _item[0]

            priority_statuses = self.playerok_account.get_item_priority_statuses(item.id, item.price)
            priority_status = None
            for status in priority_statuses:
                if isinstance(item, types.MyItem) and item.priority:
                    if status.type.name == item.priority.name:
                        priority_status = status
                elif status.type is PriorityTypes.DEFAULT:
                    priority_status = status
                if priority_status: break

            new_item = self.playerok_account.publish_item(item.id, priority_status.id)
            if new_item.status is ItemStatuses.PENDING_APPROVAL or new_item.status is ItemStatuses.APPROVED:
                self.logger.info(f"{PREFIX} {Fore.LIGHTWHITE_EX}¬´{item.name}¬ª {Fore.WHITE}‚Äî —Ç–æ–≤–∞—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚ôªÔ∏è")
            else:
                self.logger.error(f"{PREFIX} {Fore.LIGHTRED_EX}–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç ¬´{new_item.name}¬ª. –ï–≥–æ —Å—Ç–∞—Ç—É—Å: {Fore.WHITE}{new_item.status.name}")
        except Exception as e:
            self.logger.error(f"{PREFIX} {Fore.LIGHTRED_EX}–ü—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ ¬´{item.name}¬ª –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {Fore.WHITE}{e}")

    async def run_bot(self):
        self.logger.info(f"{PREFIX} Playerok –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∞–∫—Ç–∏–≤–µ–Ω –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ ‚Üì")
        self.logger.info(f"{PREFIX} {Fore.LIGHTWHITE_EX}‚îè {ACCENT_COLOR}üÜî ID: {Fore.LIGHTWHITE_EX}{self.playerok_account.profile.id}")
        self.logger.info(f"{PREFIX} {Fore.LIGHTWHITE_EX}‚î£ {ACCENT_COLOR}üë§ –ù–∏–∫–Ω–µ–π–º: {Fore.LIGHTWHITE_EX}{self.playerok_account.username}")
        self.logger.info(f"{PREFIX} {Fore.LIGHTWHITE_EX}‚î£ {ACCENT_COLOR}üí∞ –ë–∞–ª–∞–Ω—Å: {Fore.LIGHTWHITE_EX}{self.playerok_account.profile.balance.available}‚ÇΩ" + (f" {Fore.WHITE}(üîí {self.playerok_account.profile.balance.pending_income}‚ÇΩ)" if self.playerok_account.profile.balance.pending_income else ""))
        self.logger.info(f"{PREFIX} {Fore.LIGHTWHITE_EX}‚îó {ACCENT_COLOR}‚≠ê –†–µ–π—Ç–∏–Ω–≥: {Fore.LIGHTWHITE_EX}{self.playerok_account.profile.rating}")
        if self.config["playerok"]["api"]["proxy"]:
            ip_port = self.config["playerok"]["api"]["proxy"].split("@")[1] if "@" in self.config["playerok"]["api"]["proxy"] else self.config["playerok"]["api"]["proxy"]
            self.logger.info(f"{PREFIX} Playerok –±–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –ø—Ä–æ–∫—Å–∏ {Fore.LIGHTWHITE_EX}{ip_port}")

        def handler_on_playerok_bot_init(plbot: PlayerokBot):
            """ –ù–∞—á–∞–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä ON_INIT. """
            
            self.stats.bot_launch_time = datetime.now()
            set_stats(self.stats)

            def endless_loop(cycle_delay=5):
                while True:
                    try:
                        set_playerok_bot(plbot)
                        balance = self.playerok_account.profile.balance.value if self.playerok_account.profile.balance is not None else "?"
                        set_title(f"Playerok Universal v{VERSION} | {self.playerok_account.username}: {balance}‚ÇΩ")
                        
                        if data.get("initialized_users") != self.initialized_users: data.set("initialized_users", self.initialized_users)
                        if sett.get("config") != self.config: self.config = sett.get("config")
                        if sett.get("messages") != self.messages: self.messages = sett.get("messages")
                        if sett.get("custom_commands") != self.custom_commands: self.custom_commands = sett.get("custom_commands")
                        if sett.get("auto_deliveries") != self.auto_deliveries: self.auto_deliveries = sett.get("auto_deliveries")
                    except Exception:
                        self.logger.error(f"{PREFIX} {Fore.LIGHTRED_EX}–í –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º —Ü–∏–∫–ª–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {Fore.WHITE}")
                        traceback.print_exc()
                    time.sleep(cycle_delay)

            Thread(target=endless_loop, daemon=True).start()

        bot_event_handlers = HandlersManager.get_bot_event_handlers()
        bot_event_handlers["ON_PLAYEROK_BOT_INIT"].insert(0, handler_on_playerok_bot_init)
        HandlersManager.set_bot_event_handlers(bot_event_handlers)

        async def handler_new_message(plbot: PlayerokBot, event: NewMessageEvent):
            try:
                this_chat = event.chat
                if self.config["playerok"]["bot"]["tg_logging_enabled"] and (self.config["playerok"]["bot"]["tg_logging_events"]["new_user_message"] or self.config["playerok"]["bot"]["tg_logging_events"]["new_system_message"]):
                    if event.message.user.username != self.playerok_account.username:
                        do = False
                        if self.config["playerok"]["bot"]["tg_logging_events"]["new_user_message"] and event.message.user.username not in ["Playerok.com", "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"]: do = True 
                        if self.config["playerok"]["bot"]["tg_logging_events"]["new_system_message"] and event.message.user.username in ["Playerok.com", "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"]: do = True 
                        if do:
                            text = f"<b>{event.message.user.username}:</b> {event.message.text or ''}"
                            if event.message.file:
                                text += f' <b><a href="{event.message.file.url}">{event.message.file.filename}</a></b>'
                            self.log_to_tg(text=log_text(f'üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ <a href="https://playerok.com/chats/{event.chat.id}">—á–∞—Ç–µ</a>', text.strip()),
                                            kb=log_new_mess_kb(event.message.user.username))

                if self.config["playerok"]["bot"]["first_message_enabled"]:
                    if event.message.user is not None:
                        if event.message.user.id != self.playerok_account.id and event.message.user.id not in self.initialized_users and event.chat.id not in [self.playerok_account.system_chat_id, self.playerok_account.support_chat_id]:
                            try:
                                self.send_message(this_chat.id, 
                                                   self.msg("user_not_initialized", username=event.message.user.username))
                                self.initialized_users.append(event.message.user.id)
                            except Exception as e:
                                self.logger.error(f"{PREFIX} {Fore.LIGHTRED_EX}–ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {event.message.user.username} –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {Fore.WHITE}{e}")

                if event.message.user is not None:
                    if event.message.user.id != self.playerok_account.id:
                        if self.config["playerok"]["bot"]["custom_commands_enabled"]:
                            if event.message.text in self.custom_commands.keys():
                                try:
                                    msg = "\n".join(self.custom_commands[event.message.text]) + (f'\n{self.config["playerok"]["bot"]["messages_watermark"]}' if self.config["playerok"]["bot"]["messages_watermark_enabled"] else "")
                                    self.send_message(this_chat.id, msg)
                                except Exception as e:
                                    self.logger.error(f"{PREFIX} {Fore.LIGHTRED_EX}–ü—Ä–∏ –≤–≤–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–æ–º–∞–Ω–¥—ã \"{event.message.text}\" —É {event.message.user.username} –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {Fore.WHITE}{e}")
                                    self.send_message(this_chat.id, 
                                                       self.msg("command_error"))
                        if str(event.message.text).lower() == "!–∫–æ–º–∞–Ω–¥—ã" or str(event.message.text).lower() == "!commands":
                            try:
                                self.send_message(this_chat.id, 
                                                   self.msg("buyer_command_commands"))
                            except Exception as e:
                                self.logger.error(f"{PREFIX} {Fore.LIGHTRED_EX}–ü—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–º–∞–Ω–¥—ã \"!–∫–æ–º–∞–Ω–¥—ã\" —É {event.message.user.username} –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {Fore.WHITE}{e}")
                                self.send_message(this_chat.id, 
                                                   self.msg("command_error"))
                        if str(event.message.text).lower() == "!–ø—Ä–æ–¥–∞–≤–µ—Ü" or str(event.message.text).lower() == "!seller":
                            try:
                                asyncio.run_coroutine_threadsafe(get_telegram_bot().call_seller(event.message.user.username, this_chat.id), get_telegram_bot_loop())
                                self.send_message(this_chat.id, 
                                                   self.msg("buyer_command_seller"))
                            except Exception as e:
                                self.logger.log(f"{PREFIX} {Fore.LIGHTRED_EX}–ü—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–º–∞–Ω–¥—ã \"!–ø—Ä–æ–¥–∞–≤–µ—Ü\" —É {event.message.user.username} –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {Fore.WHITE}{e}")
                                self.send_message(this_chat.id, 
                                                   self.msg("command_error"))
            except Exception:
                self.logger.error(f"{PREFIX} {Fore.LIGHTRED_EX}–ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–≤–µ–Ω—Ç–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {Fore.WHITE}")
                traceback.print_exc()

        async def handler_new_deal(plbot: PlayerokBot, event: NewDealEvent):
            try:
                this_chat = event.chat
                self.logger.info(f"{PREFIX} {ACCENT_COLOR}üìã  –ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞: {Fore.LIGHTWHITE_EX}{event.deal.user.username}{Fore.WHITE} –æ–ø–ª–∞—Ç–∏–ª –ø—Ä–µ–¥–º–µ—Ç {Fore.LIGHTWHITE_EX}¬´{event.deal.item.name}¬ª{Fore.WHITE} –Ω–∞ —Å—É–º–º—É {Fore.LIGHTWHITE_EX}{event.deal.item.price or '?'}‚ÇΩ")
                if self.config["playerok"]["bot"]["tg_logging_enabled"] and self.config["playerok"]["bot"]["tg_logging_events"]["new_deal"]:
                    self.log_to_tg(text=log_text(f'üìã –ù–æ–≤–∞—è <a href="https://playerok.com/deal/{event.deal.id}">—Å–¥–µ–ª–∫–∞</a>', f"<b>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</b> {event.deal.user.username}\n<b>–ü—Ä–µ–¥–º–µ—Ç:</b> {event.deal.item.name}\n<b>–°—É–º–º–∞:</b> {event.deal.item.price or '?'}‚ÇΩ"),
                                    kb=log_new_deal_kb(event.deal.user.username, event.deal.id))

                if self.config["playerok"]["bot"]["auto_deliveries_enabled"]:
                    for auto_delivery in self.auto_deliveries:
                        for phrase in auto_delivery["keyphrases"]:
                            if phrase.lower() in event.deal.item.name.lower() or event.deal.item.name.lower() == phrase.lower():
                                self.send_message(this_chat.id, "\n".join(auto_delivery["message"]))
                                break

                if self.config["playerok"]["bot"]["auto_complete_deals_enabled"]:
                    if event.deal.user.id != self.playerok_account.id:
                        self.playerok_account.update_deal(event.deal.id, ItemDealStatuses.SENT)
            except Exception:
                self.logger.error(f"{PREFIX} {Fore.LIGHTRED_EX}–ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–≤–µ–Ω—Ç–∞ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {Fore.WHITE}")
                traceback.print_exc()

        async def handler_item_paid(plbot: PlayerokBot, event: ItemPaidEvent):
            try:
                if self.config["playerok"]["bot"]["auto_restore_items_enabled"]:
                    await self.restore_last_sold_item(event.deal.item)
            except Exception:
                self.logger.error(f"{PREFIX} {Fore.LIGHTRED_EX}–ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–≤–µ–Ω—Ç–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {Fore.WHITE}")
                traceback.print_exc()

        async def handler_new_problem(plbot: PlayerokBot, event: ItemPaidEvent):
            try:
                self.logger.info(f"{PREFIX} {ACCENT_COLOR}ü§¨  –ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞: {Fore.LIGHTWHITE_EX}{event.deal.user.username}{Fore.WHITE} –æ—Ç–∫—Ä—ã–ª –∂–∞–ª–æ–±—É –≤ —Å–¥–µ–ª–∫–µ –Ω–∞ –ø–æ–∫—É–ø–∫—É {Fore.LIGHTWHITE_EX}¬´{event.deal.item.name}¬ª{Fore.WHITE}")
                if self.config["playerok"]["bot"]["tg_logging_enabled"] and self.config["playerok"]["bot"]["tg_logging_events"]["new_problem"]:
                    self.log_to_tg(log_text(f'ü§¨ –ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞ –≤ <a href="https://playerok.com/deal/{event.deal.id}">—Å–¥–µ–ª–∫–µ</a>', f"<b>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</b> {event.deal.user.username}\n<b>–ü—Ä–µ–¥–º–µ—Ç:</b> {event.deal.item.name}\n"))
            except Exception:
                self.logger.error(f"{PREFIX} {Fore.LIGHTRED_EX}–ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–≤–µ–Ω—Ç–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {Fore.WHITE}")
                traceback.print_exc()

        async def handler_deal_status_changed(plbot: PlayerokBot, event: DealStatusChangedEvent):
            try:
                this_chat = event.chat
                if event.deal.status is ItemDealStatuses.PENDING: status = "–í –æ–∂–∏–¥–∞–Ω–∏–∏"
                elif event.deal.status is ItemDealStatuses.SENT: status = "–¢–æ–≤–∞—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"
                elif event.deal.status is ItemDealStatuses.CONFIRMED: status = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω"
                elif event.deal.status is ItemDealStatuses.ROLLED_BACK: status = "–í–æ–∑–≤—Ä–∞—Ç"
                self.logger.info(f"{PREFIX} {ACCENT_COLOR}üîÑÔ∏èüìã  –°—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏ {Fore.LIGHTWHITE_EX}{event.deal.id}{ACCENT_COLOR} –æ—Ç {Fore.LIGHTWHITE_EX}{event.deal.user.username}{ACCENT_COLOR} –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ {Fore.LIGHTWHITE_EX}¬´{status}¬ª")
                if self.config["playerok"]["bot"]["tg_logging_enabled"] and self.config["playerok"]["bot"]["tg_logging_events"]["deal_status_changed"]:
                    self.log_to_tg(log_text(f'üîÑÔ∏èüìã –°—Ç–∞—Ç—É—Å <a href="https://playerok.com/deal/{event.deal.id}/">—Å–¥–µ–ª–∫–∏</a> –∏–∑–º–µ–Ω–∏–ª—Å—è', f"<b>–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:</b> {status}"))
                try:
                    if event.deal.status is ItemDealStatuses.CONFIRMED:
                        self.stats.orders_completed += 1
                        self.stats.earned_money += round(event.deal.transaction.value or 0, 2)
                    elif event.deal.status is ItemDealStatuses.ROLLED_BACK:
                        self.stats.orders_refunded += 1
                except Exception as e:
                    self.logger.error(f"{PREFIX} {Fore.LIGHTRED_EX}–ü—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {Fore.WHITE}{e}")
                finally:
                    set_stats(self.stats)

                if event.deal.status is ItemDealStatuses.CONFIRMED:
                    self.send_message(this_chat.id, self.msg("deal_confirmed"))
            except Exception:
                self.logger.error(f"{PREFIX} {Fore.LIGHTRED_EX}–ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–≤–µ–Ω—Ç–∞ —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞ —Å–¥–µ–ª–∫–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {Fore.WHITE}")
                traceback.print_exc()
            
        playerok_event_handlers = HandlersManager.get_playerok_event_handlers()
        playerok_event_handlers[EventTypes.NEW_MESSAGE].insert(0, handler_new_message)
        playerok_event_handlers[EventTypes.NEW_DEAL].insert(0, handler_new_deal)
        playerok_event_handlers[EventTypes.DEAL_STATUS_CHANGED].insert(0, handler_deal_status_changed)
        playerok_event_handlers[EventTypes.DEAL_HAS_PROBLEM].insert(0, handler_new_problem)
        playerok_event_handlers[EventTypes.ITEM_PAID].insert(0, handler_item_paid)
        HandlersManager.set_playerok_event_handlers(playerok_event_handlers)

        bot_event_handlers = HandlersManager.get_bot_event_handlers()
        def handle_on_playerok_bot_init():
            """ 
            –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Playerok –±–æ—Ç–∞.
            –ó–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞ —Å–æ–±–æ–π –≤—Å–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã ON_PLAYEROK_BOT_INIT 
            """
            if "ON_PLAYEROK_BOT_INIT" in bot_event_handlers:
                for handler in bot_event_handlers["ON_PLAYEROK_BOT_INIT"]:
                    try:
                        handler(self)
                    except Exception as e:
                        self.logger.error(f"{PREFIX} {Fore.LIGHTRED_EX}–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ö–µ–Ω–¥–ª–µ—Ä–∞ –∏–≤–µ–Ω—Ç–∞ ON_PLAYEROK_BOT_INIT: {Fore.WHITE}{e}")
        handle_on_playerok_bot_init()

        self.logger.info(f"{PREFIX} –°–ª—É—à–∞—Ç–µ–ª—å —Å–æ–±—ã—Ç–∏–π –∑–∞–ø—É—â–µ–Ω")
        listener = EventListener(self.playerok_account)
        for event in listener.listen(requests_delay=self.config["playerok"]["api"]["listener_requests_delay"]):
            playerok_event_handlers = HandlersManager.get_playerok_event_handlers() # —á—Ç–æ–±—ã –∫–∞–∂–¥—ã–π —Ä–∞–∑ –±—Ä–∞—Ç—å —Å–≤–µ–∂–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã, –∏–±–æ –º–æ–¥—É–ª–∏ –º–æ–≥—É—Ç –æ—Ç–∫–ª—é—á–∞—Ç—å—Å—è/–≤–∫–ª—é—á–∞—Ç—å—Å—è
            if event.type in playerok_event_handlers:
                for handler in playerok_event_handlers[event.type]:
                    try:
                        await handler(self, event)
                    except Exception as e:
                        self.logger.error(f"{PREFIX} {Fore.LIGHTRED_EX}–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ö–µ–Ω–¥–ª–µ—Ä–∞ {handler} –≤ –∏–≤–µ–Ω—Ç–µ {event.type.name}: {Fore.WHITE}{e}")